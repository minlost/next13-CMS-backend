// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"

}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  carousels Carousel[] @relation("StoreToCarousel")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[] @relation("CategoryToBillboard")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Carousel {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToCarousel", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([storeId])
  
}


model Category {
  id          String @id @default(uuid())
  storeId      String
  store        Store @relation("StoreToCategory",fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("CategoryToBillboard",fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id       String @id @default(uuid())
  storeId     String
  
  store Store @relation("StoreToSize",fields: [storeId], references: [id])
  name     String
  value   String
  products Product[] @relation("SizeToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    @@index([storeId])

}

model Color {
  id       String @id @default(uuid())
  storeId     String
  
  store Store @relation("StoreToColor",fields: [storeId], references: [id])
  products Product[] @relation("ColorToProduct")
  name     String
  value   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    @@index([storeId])

}

model Product {
  id         String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId     String
  size       Size @relation("SizeToProduct",fields: [sizeId], references: [id])
  colorId    String
  color      Color @relation("ColorToProduct",fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  quantity   Int @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
   teststring String @default("test")
  @@index([colorId])
  @@index([sizeId])
  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])

}

model Order {
  id        String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address Address[]
  email String @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Address {
  id       String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  city     String
  street   String
  zip  String
  country  String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     // Quantity of the product

  name      String @default("")
  price Float @default(0)
  size      String @default("")
  color     String  @default("")





  @@index([orderId])
  @@index([productId])
}